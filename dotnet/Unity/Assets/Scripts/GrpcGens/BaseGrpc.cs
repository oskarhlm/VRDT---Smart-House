// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Base {
  public static partial class Netatmo
  {
    static readonly string __ServiceName = "base.Netatmo";

    static readonly grpc::Marshaller<global::Base.NetatmoMessages.Types.NetatmoRequest> __Marshaller_base_NetatmoMessages_NetatmoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Base.NetatmoMessages.Types.NetatmoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Base.NetatmoMessages.Types.NetatmoData> __Marshaller_base_NetatmoMessages_NetatmoData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Base.NetatmoMessages.Types.NetatmoData.Parser.ParseFrom);

    static readonly grpc::Method<global::Base.NetatmoMessages.Types.NetatmoRequest, global::Base.NetatmoMessages.Types.NetatmoData> __Method_GetData = new grpc::Method<global::Base.NetatmoMessages.Types.NetatmoRequest, global::Base.NetatmoMessages.Types.NetatmoData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetData",
        __Marshaller_base_NetatmoMessages_NetatmoRequest,
        __Marshaller_base_NetatmoMessages_NetatmoData);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Base.BaseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Netatmo</summary>
    [grpc::BindServiceMethod(typeof(Netatmo), "BindService")]
    public abstract partial class NetatmoBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Base.NetatmoMessages.Types.NetatmoData> GetData(global::Base.NetatmoMessages.Types.NetatmoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Netatmo</summary>
    public partial class NetatmoClient : grpc::ClientBase<NetatmoClient>
    {
      /// <summary>Creates a new client for Netatmo</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetatmoClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Netatmo that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetatmoClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetatmoClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetatmoClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Base.NetatmoMessages.Types.NetatmoData GetData(global::Base.NetatmoMessages.Types.NetatmoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Base.NetatmoMessages.Types.NetatmoData GetData(global::Base.NetatmoMessages.Types.NetatmoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Base.NetatmoMessages.Types.NetatmoData> GetDataAsync(global::Base.NetatmoMessages.Types.NetatmoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Base.NetatmoMessages.Types.NetatmoData> GetDataAsync(global::Base.NetatmoMessages.Types.NetatmoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetatmoClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetatmoClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NetatmoBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetData, serviceImpl.GetData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NetatmoBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Base.NetatmoMessages.Types.NetatmoRequest, global::Base.NetatmoMessages.Types.NetatmoData>(serviceImpl.GetData));
    }

  }
  public static partial class Image
  {
    static readonly string __ServiceName = "base.Image";

    static readonly grpc::Marshaller<global::Base.ImageMessages.Types.ImageRequest> __Marshaller_base_ImageMessages_ImageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Base.ImageMessages.Types.ImageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Base.ImageMessages.Types.ImageData> __Marshaller_base_ImageMessages_ImageData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Base.ImageMessages.Types.ImageData.Parser.ParseFrom);

    static readonly grpc::Method<global::Base.ImageMessages.Types.ImageRequest, global::Base.ImageMessages.Types.ImageData> __Method_GetImage = new grpc::Method<global::Base.ImageMessages.Types.ImageRequest, global::Base.ImageMessages.Types.ImageData>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetImage",
        __Marshaller_base_ImageMessages_ImageRequest,
        __Marshaller_base_ImageMessages_ImageData);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Base.BaseReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Image</summary>
    [grpc::BindServiceMethod(typeof(Image), "BindService")]
    public abstract partial class ImageBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Base.ImageMessages.Types.ImageData> GetImage(global::Base.ImageMessages.Types.ImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Image</summary>
    public partial class ImageClient : grpc::ClientBase<ImageClient>
    {
      /// <summary>Creates a new client for Image</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ImageClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Image that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ImageClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ImageClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ImageClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Base.ImageMessages.Types.ImageData GetImage(global::Base.ImageMessages.Types.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Base.ImageMessages.Types.ImageData GetImage(global::Base.ImageMessages.Types.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetImage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Base.ImageMessages.Types.ImageData> GetImageAsync(global::Base.ImageMessages.Types.ImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Base.ImageMessages.Types.ImageData> GetImageAsync(global::Base.ImageMessages.Types.ImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetImage, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ImageClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImageClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ImageBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetImage, serviceImpl.GetImage).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ImageBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Base.ImageMessages.Types.ImageRequest, global::Base.ImageMessages.Types.ImageData>(serviceImpl.GetImage));
    }

  }
}
#endregion
