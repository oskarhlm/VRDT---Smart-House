// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GrpcBase {

  /// <summary>Holder for reflection information generated from base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiYXNlLnByb3RvEglncnBjX2Jhc2UaH2dvb2dsZS9wcm90b2J1Zi90aW1l",
            "c3RhbXAucHJvdG8iuwIKD05ldGF0bW9NZXNzYWdlcxoQCg5OZXRhdG1vUmVx",
            "dWVzdBp9CgtOZXRhdG1vRGF0YRI1CgZpbmRvb3IYASABKAsyJS5ncnBjX2Jh",
            "c2UuTmV0YXRtb01lc3NhZ2VzLkluZG9vckRhdGESNwoHb3V0ZG9vchgCIAEo",
            "CzImLmdycGNfYmFzZS5OZXRhdG1vTWVzc2FnZXMuT3V0ZG9vckRhdGEaYQoK",
            "SW5kb29yRGF0YRITCgt0ZW1wZXJhdHVyZRgBIAEoAhILCgNDTzIYAiABKAIS",
            "EAoIaHVtaWRpdHkYAyABKAISDQoFbm9pc2UYBCABKAISEAoIcHJlc3N1cmUY",
            "BSABKAIaNAoLT3V0ZG9vckRhdGESEwoLdGVtcGVyYXR1cmUYASABKAISEAoI",
            "aHVtaWRpdHkYAiABKAIisgEKDUltYWdlTWVzc2FnZXMaQAoMSW1hZ2VSZXF1",
            "ZXN0EhEKCWltYWdlUGF0aBgBIAEoCRINCgV3aWR0aBgCIAEoBRIOCgZoZWln",
            "aHQYAyABKAUaFQoTS29uZ2VmYW1pbGllUmVxdWVzdBpICglJbWFnZURhdGES",
            "DAoEZGF0YRgBIAEoDBIOCgZmb3JtYXQYAiABKAkSDQoFd2lkdGgYAyABKAUS",
            "DgoGaGVpZ2h0GAQgASgFIt8BCg5UaWJiZXJNZXNzYWdlcxpeCgdSZXF1ZXN0",
            "EkAKDnRpbWVSZXNvbHV0aW9uGAEgASgOMiguZ3JwY19iYXNlLlRpYmJlck1l",
            "c3NhZ2VzLlRpbWVSZXNvbHV0aW9uEhEKCXRpbWVVbml0cxgCIAEoBRo9CghS",
            "ZXNwb25zZRIxCgVpbWFnZRgBIAEoCzIiLmdycGNfYmFzZS5JbWFnZU1lc3Nh",
            "Z2VzLkltYWdlRGF0YSIuCg5UaW1lUmVzb2x1dGlvbhIICgRIT1VSEAASBwoD",
            "REFZEAESCQoFTU9OVEgQAiJmChJEaXNydXB0aXZlTWVzc2FnZXMaCQoHUmVx",
            "dWVzdBoeCghSZXNwb25zZRISCgpzZW5zb3JOYW1lGAEgASgJGiUKDkhlYXRt",
            "YXBSZXF1ZXN0EhMKC2Zsb29yTnVtYmVyGAEgASgFIowCChJTb2xhclBhbmVs",
            "TWVzc2FnZXMamwEKEFBhbmVsSW5mb1JlcXVlc3QSEQoJcGFuZWxOYW1lGAEg",
            "ASgJEhIKCnBhbmVsV2lkdGgYAiABKAISEwoLcGFuZWxIZWlnaHQYAyABKAIS",
            "DAoEdGlsdBgEIAEoAhIPCgdhemltdXRoGAUgASgCEiwKCGRhdGV0aW1lGAYg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBpYChFQYW5lbEluZm9S",
            "ZXNwb25zZRIUCgxjdXJyZW50UG93ZXIYASABKAISGQoRY3VycmVudElycmFk",
            "aWFuY2UYAiABKAISEgoKZWZmZWNpZW5jeRgDIAEoAjJnCgdOZXRhdG1vElwK",
            "B0dldERhdGESKS5ncnBjX2Jhc2UuTmV0YXRtb01lc3NhZ2VzLk5ldGF0bW9S",
            "ZXF1ZXN0GiYuZ3JwY19iYXNlLk5ldGF0bW9NZXNzYWdlcy5OZXRhdG1vRGF0",
            "YTKjAgoFSW1hZ2USVQoIR2V0SW1hZ2USJS5ncnBjX2Jhc2UuSW1hZ2VNZXNz",
            "YWdlcy5JbWFnZVJlcXVlc3QaIi5ncnBjX2Jhc2UuSW1hZ2VNZXNzYWdlcy5J",
            "bWFnZURhdGESVwoOR2V0VGliYmVySW1hZ2USIS5ncnBjX2Jhc2UuVGliYmVy",
            "TWVzc2FnZXMuUmVxdWVzdBoiLmdycGNfYmFzZS5UaWJiZXJNZXNzYWdlcy5S",
            "ZXNwb25zZRJqChRHZXRLb25nZWZhbWlsaWVJbWFnZRIsLmdycGNfYmFzZS5J",
            "bWFnZU1lc3NhZ2VzLktvbmdlZmFtaWxpZVJlcXVlc3QaIi5ncnBjX2Jhc2Uu",
            "SW1hZ2VNZXNzYWdlcy5JbWFnZURhdGEwATLaAQoKRGlzcnVwdGl2ZRJnChRH",
            "ZXRUZW1wZXJhdHVyZVN0cmVhbRIlLmdycGNfYmFzZS5EaXNydXB0aXZlTWVz",
            "c2FnZXMuUmVxdWVzdBomLmdycGNfYmFzZS5EaXNydXB0aXZlTWVzc2FnZXMu",
            "UmVzcG9uc2UwARJjCg9HZXRIZWF0bWFwSW1hZ2USLC5ncnBjX2Jhc2UuRGlz",
            "cnVwdGl2ZU1lc3NhZ2VzLkhlYXRtYXBSZXF1ZXN0GiIuZ3JwY19iYXNlLklt",
            "YWdlTWVzc2FnZXMuSW1hZ2VEYXRhMoYBCgpTb2xhclBhbmVsEngKEUdldFNv",
            "bGFyUGFuZWxJbmZvEi4uZ3JwY19iYXNlLlNvbGFyUGFuZWxNZXNzYWdlcy5Q",
            "YW5lbEluZm9SZXF1ZXN0Gi8uZ3JwY19iYXNlLlNvbGFyUGFuZWxNZXNzYWdl",
            "cy5QYW5lbEluZm9SZXNwb25zZSgBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.NetatmoMessages), global::GrpcBase.NetatmoMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.NetatmoMessages.Types.NetatmoRequest), global::GrpcBase.NetatmoMessages.Types.NetatmoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.NetatmoMessages.Types.NetatmoData), global::GrpcBase.NetatmoMessages.Types.NetatmoData.Parser, new[]{ "Indoor", "Outdoor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.NetatmoMessages.Types.IndoorData), global::GrpcBase.NetatmoMessages.Types.IndoorData.Parser, new[]{ "Temperature", "CO2", "Humidity", "Noise", "Pressure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.NetatmoMessages.Types.OutdoorData), global::GrpcBase.NetatmoMessages.Types.OutdoorData.Parser, new[]{ "Temperature", "Humidity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.ImageMessages), global::GrpcBase.ImageMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.ImageMessages.Types.ImageRequest), global::GrpcBase.ImageMessages.Types.ImageRequest.Parser, new[]{ "ImagePath", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.ImageMessages.Types.KongefamilieRequest), global::GrpcBase.ImageMessages.Types.KongefamilieRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.ImageMessages.Types.ImageData), global::GrpcBase.ImageMessages.Types.ImageData.Parser, new[]{ "Data", "Format", "Width", "Height" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.TibberMessages), global::GrpcBase.TibberMessages.Parser, null, null, new[]{ typeof(global::GrpcBase.TibberMessages.Types.TimeResolution) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.TibberMessages.Types.Request), global::GrpcBase.TibberMessages.Types.Request.Parser, new[]{ "TimeResolution", "TimeUnits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.TibberMessages.Types.Response), global::GrpcBase.TibberMessages.Types.Response.Parser, new[]{ "Image" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.DisruptiveMessages), global::GrpcBase.DisruptiveMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.DisruptiveMessages.Types.Request), global::GrpcBase.DisruptiveMessages.Types.Request.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.DisruptiveMessages.Types.Response), global::GrpcBase.DisruptiveMessages.Types.Response.Parser, new[]{ "SensorName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.DisruptiveMessages.Types.HeatmapRequest), global::GrpcBase.DisruptiveMessages.Types.HeatmapRequest.Parser, new[]{ "FloorNumber" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.SolarPanelMessages), global::GrpcBase.SolarPanelMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.SolarPanelMessages.Types.PanelInfoRequest), global::GrpcBase.SolarPanelMessages.Types.PanelInfoRequest.Parser, new[]{ "PanelName", "PanelWidth", "PanelHeight", "Tilt", "Azimuth", "Datetime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GrpcBase.SolarPanelMessages.Types.PanelInfoResponse), global::GrpcBase.SolarPanelMessages.Types.PanelInfoResponse.Parser, new[]{ "CurrentPower", "CurrentIrradiance", "Effeciency" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NetatmoMessages : pb::IMessage<NetatmoMessages> {
    private static readonly pb::MessageParser<NetatmoMessages> _parser = new pb::MessageParser<NetatmoMessages>(() => new NetatmoMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetatmoMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBase.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages(NetatmoMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages Clone() {
      return new NetatmoMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetatmoMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetatmoMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetatmoMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetatmoMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NetatmoRequest : pb::IMessage<NetatmoRequest> {
        private static readonly pb::MessageParser<NetatmoRequest> _parser = new pb::MessageParser<NetatmoRequest>(() => new NetatmoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetatmoRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.NetatmoMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest(NetatmoRequest other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest Clone() {
          return new NetatmoRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetatmoRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetatmoRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetatmoRequest other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class NetatmoData : pb::IMessage<NetatmoData> {
        private static readonly pb::MessageParser<NetatmoData> _parser = new pb::MessageParser<NetatmoData>(() => new NetatmoData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetatmoData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.NetatmoMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData(NetatmoData other) : this() {
          indoor_ = other.indoor_ != null ? other.indoor_.Clone() : null;
          outdoor_ = other.outdoor_ != null ? other.outdoor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData Clone() {
          return new NetatmoData(this);
        }

        /// <summary>Field number for the "indoor" field.</summary>
        public const int IndoorFieldNumber = 1;
        private global::GrpcBase.NetatmoMessages.Types.IndoorData indoor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GrpcBase.NetatmoMessages.Types.IndoorData Indoor {
          get { return indoor_; }
          set {
            indoor_ = value;
          }
        }

        /// <summary>Field number for the "outdoor" field.</summary>
        public const int OutdoorFieldNumber = 2;
        private global::GrpcBase.NetatmoMessages.Types.OutdoorData outdoor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GrpcBase.NetatmoMessages.Types.OutdoorData Outdoor {
          get { return outdoor_; }
          set {
            outdoor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetatmoData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetatmoData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Indoor, other.Indoor)) return false;
          if (!object.Equals(Outdoor, other.Outdoor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (indoor_ != null) hash ^= Indoor.GetHashCode();
          if (outdoor_ != null) hash ^= Outdoor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (indoor_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Indoor);
          }
          if (outdoor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Outdoor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (indoor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Indoor);
          }
          if (outdoor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outdoor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetatmoData other) {
          if (other == null) {
            return;
          }
          if (other.indoor_ != null) {
            if (indoor_ == null) {
              Indoor = new global::GrpcBase.NetatmoMessages.Types.IndoorData();
            }
            Indoor.MergeFrom(other.Indoor);
          }
          if (other.outdoor_ != null) {
            if (outdoor_ == null) {
              Outdoor = new global::GrpcBase.NetatmoMessages.Types.OutdoorData();
            }
            Outdoor.MergeFrom(other.Outdoor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (indoor_ == null) {
                  Indoor = new global::GrpcBase.NetatmoMessages.Types.IndoorData();
                }
                input.ReadMessage(Indoor);
                break;
              }
              case 18: {
                if (outdoor_ == null) {
                  Outdoor = new global::GrpcBase.NetatmoMessages.Types.OutdoorData();
                }
                input.ReadMessage(Outdoor);
                break;
              }
            }
          }
        }

      }

      public sealed partial class IndoorData : pb::IMessage<IndoorData> {
        private static readonly pb::MessageParser<IndoorData> _parser = new pb::MessageParser<IndoorData>(() => new IndoorData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IndoorData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.NetatmoMessages.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData(IndoorData other) : this() {
          temperature_ = other.temperature_;
          cO2_ = other.cO2_;
          humidity_ = other.humidity_;
          noise_ = other.noise_;
          pressure_ = other.pressure_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData Clone() {
          return new IndoorData(this);
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 1;
        private float temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        /// <summary>Field number for the "CO2" field.</summary>
        public const int CO2FieldNumber = 2;
        private float cO2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CO2 {
          get { return cO2_; }
          set {
            cO2_ = value;
          }
        }

        /// <summary>Field number for the "humidity" field.</summary>
        public const int HumidityFieldNumber = 3;
        private float humidity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Humidity {
          get { return humidity_; }
          set {
            humidity_ = value;
          }
        }

        /// <summary>Field number for the "noise" field.</summary>
        public const int NoiseFieldNumber = 4;
        private float noise_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Noise {
          get { return noise_; }
          set {
            noise_ = value;
          }
        }

        /// <summary>Field number for the "pressure" field.</summary>
        public const int PressureFieldNumber = 5;
        private float pressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Pressure {
          get { return pressure_; }
          set {
            pressure_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IndoorData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IndoorData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CO2, other.CO2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Noise, other.Noise)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pressure, other.Pressure)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
          if (CO2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CO2);
          if (Humidity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Humidity);
          if (Noise != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Noise);
          if (Pressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pressure);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Temperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Temperature);
          }
          if (CO2 != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(CO2);
          }
          if (Humidity != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Humidity);
          }
          if (Noise != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Noise);
          }
          if (Pressure != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Pressure);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Temperature != 0F) {
            size += 1 + 4;
          }
          if (CO2 != 0F) {
            size += 1 + 4;
          }
          if (Humidity != 0F) {
            size += 1 + 4;
          }
          if (Noise != 0F) {
            size += 1 + 4;
          }
          if (Pressure != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IndoorData other) {
          if (other == null) {
            return;
          }
          if (other.Temperature != 0F) {
            Temperature = other.Temperature;
          }
          if (other.CO2 != 0F) {
            CO2 = other.CO2;
          }
          if (other.Humidity != 0F) {
            Humidity = other.Humidity;
          }
          if (other.Noise != 0F) {
            Noise = other.Noise;
          }
          if (other.Pressure != 0F) {
            Pressure = other.Pressure;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Temperature = input.ReadFloat();
                break;
              }
              case 21: {
                CO2 = input.ReadFloat();
                break;
              }
              case 29: {
                Humidity = input.ReadFloat();
                break;
              }
              case 37: {
                Noise = input.ReadFloat();
                break;
              }
              case 45: {
                Pressure = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class OutdoorData : pb::IMessage<OutdoorData> {
        private static readonly pb::MessageParser<OutdoorData> _parser = new pb::MessageParser<OutdoorData>(() => new OutdoorData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutdoorData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.NetatmoMessages.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData(OutdoorData other) : this() {
          temperature_ = other.temperature_;
          humidity_ = other.humidity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData Clone() {
          return new OutdoorData(this);
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 1;
        private float temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        /// <summary>Field number for the "humidity" field.</summary>
        public const int HumidityFieldNumber = 2;
        private float humidity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Humidity {
          get { return humidity_; }
          set {
            humidity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutdoorData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutdoorData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
          if (Humidity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Humidity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Temperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Temperature);
          }
          if (Humidity != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Humidity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Temperature != 0F) {
            size += 1 + 4;
          }
          if (Humidity != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutdoorData other) {
          if (other == null) {
            return;
          }
          if (other.Temperature != 0F) {
            Temperature = other.Temperature;
          }
          if (other.Humidity != 0F) {
            Humidity = other.Humidity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Temperature = input.ReadFloat();
                break;
              }
              case 21: {
                Humidity = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ImageMessages : pb::IMessage<ImageMessages> {
    private static readonly pb::MessageParser<ImageMessages> _parser = new pb::MessageParser<ImageMessages>(() => new ImageMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBase.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages(ImageMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages Clone() {
      return new ImageMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ImageRequest : pb::IMessage<ImageRequest> {
        private static readonly pb::MessageParser<ImageRequest> _parser = new pb::MessageParser<ImageRequest>(() => new ImageRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.ImageMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest(ImageRequest other) : this() {
          imagePath_ = other.imagePath_;
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest Clone() {
          return new ImageRequest(this);
        }

        /// <summary>Field number for the "imagePath" field.</summary>
        public const int ImagePathFieldNumber = 1;
        private string imagePath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImagePath {
          get { return imagePath_; }
          set {
            imagePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 2;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ImagePath != other.ImagePath) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ImagePath.Length != 0) hash ^= ImagePath.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ImagePath.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ImagePath);
          }
          if (Width != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ImagePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImagePath);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRequest other) {
          if (other == null) {
            return;
          }
          if (other.ImagePath.Length != 0) {
            ImagePath = other.ImagePath;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ImagePath = input.ReadString();
                break;
              }
              case 16: {
                Width = input.ReadInt32();
                break;
              }
              case 24: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class KongefamilieRequest : pb::IMessage<KongefamilieRequest> {
        private static readonly pb::MessageParser<KongefamilieRequest> _parser = new pb::MessageParser<KongefamilieRequest>(() => new KongefamilieRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KongefamilieRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.ImageMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KongefamilieRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KongefamilieRequest(KongefamilieRequest other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KongefamilieRequest Clone() {
          return new KongefamilieRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KongefamilieRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KongefamilieRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KongefamilieRequest other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class ImageData : pb::IMessage<ImageData> {
        private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.ImageMessages.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData(ImageData other) : this() {
          data_ = other.data_;
          format_ = other.format_;
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData Clone() {
          return new ImageData(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 2;
        private string format_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Format {
          get { return format_; }
          set {
            format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 4;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Data != other.Data) return false;
          if (Format != other.Format) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (Format.Length != 0) hash ^= Format.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Data.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Data);
          }
          if (Format.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Format);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (Format.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageData other) {
          if (other == null) {
            return;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          if (other.Format.Length != 0) {
            Format = other.Format;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Data = input.ReadBytes();
                break;
              }
              case 18: {
                Format = input.ReadString();
                break;
              }
              case 24: {
                Width = input.ReadInt32();
                break;
              }
              case 32: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TibberMessages : pb::IMessage<TibberMessages> {
    private static readonly pb::MessageParser<TibberMessages> _parser = new pb::MessageParser<TibberMessages>(() => new TibberMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TibberMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBase.BaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TibberMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TibberMessages(TibberMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TibberMessages Clone() {
      return new TibberMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TibberMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TibberMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TibberMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TibberMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TimeResolution {
        [pbr::OriginalName("HOUR")] Hour = 0,
        [pbr::OriginalName("DAY")] Day = 1,
        [pbr::OriginalName("MONTH")] Month = 2,
      }

      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.TibberMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          timeResolution_ = other.timeResolution_;
          timeUnits_ = other.timeUnits_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "timeResolution" field.</summary>
        public const int TimeResolutionFieldNumber = 1;
        private global::GrpcBase.TibberMessages.Types.TimeResolution timeResolution_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GrpcBase.TibberMessages.Types.TimeResolution TimeResolution {
          get { return timeResolution_; }
          set {
            timeResolution_ = value;
          }
        }

        /// <summary>Field number for the "timeUnits" field.</summary>
        public const int TimeUnitsFieldNumber = 2;
        private int timeUnits_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TimeUnits {
          get { return timeUnits_; }
          set {
            timeUnits_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimeResolution != other.TimeResolution) return false;
          if (TimeUnits != other.TimeUnits) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimeResolution != 0) hash ^= TimeResolution.GetHashCode();
          if (TimeUnits != 0) hash ^= TimeUnits.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TimeResolution != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) TimeResolution);
          }
          if (TimeUnits != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(TimeUnits);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimeResolution != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeResolution);
          }
          if (TimeUnits != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeUnits);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.TimeResolution != 0) {
            TimeResolution = other.TimeResolution;
          }
          if (other.TimeUnits != 0) {
            TimeUnits = other.TimeUnits;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                TimeResolution = (global::GrpcBase.TibberMessages.Types.TimeResolution) input.ReadEnum();
                break;
              }
              case 16: {
                TimeUnits = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.TibberMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          image_ = other.image_ != null ? other.image_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 1;
        private global::GrpcBase.ImageMessages.Types.ImageData image_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::GrpcBase.ImageMessages.Types.ImageData Image {
          get { return image_; }
          set {
            image_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Image, other.Image)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (image_ != null) hash ^= Image.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (image_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Image);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (image_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.image_ != null) {
            if (image_ == null) {
              Image = new global::GrpcBase.ImageMessages.Types.ImageData();
            }
            Image.MergeFrom(other.Image);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (image_ == null) {
                  Image = new global::GrpcBase.ImageMessages.Types.ImageData();
                }
                input.ReadMessage(Image);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class DisruptiveMessages : pb::IMessage<DisruptiveMessages> {
    private static readonly pb::MessageParser<DisruptiveMessages> _parser = new pb::MessageParser<DisruptiveMessages>(() => new DisruptiveMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisruptiveMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBase.BaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisruptiveMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisruptiveMessages(DisruptiveMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisruptiveMessages Clone() {
      return new DisruptiveMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisruptiveMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisruptiveMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisruptiveMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DisruptiveMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Request : pb::IMessage<Request> {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.DisruptiveMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class Response : pb::IMessage<Response> {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.DisruptiveMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          sensorName_ = other.sensorName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "sensorName" field.</summary>
        public const int SensorNameFieldNumber = 1;
        private string sensorName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SensorName {
          get { return sensorName_; }
          set {
            sensorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SensorName != other.SensorName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SensorName.Length != 0) hash ^= SensorName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SensorName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(SensorName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SensorName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.SensorName.Length != 0) {
            SensorName = other.SensorName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                SensorName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class HeatmapRequest : pb::IMessage<HeatmapRequest> {
        private static readonly pb::MessageParser<HeatmapRequest> _parser = new pb::MessageParser<HeatmapRequest>(() => new HeatmapRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HeatmapRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.DisruptiveMessages.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeatmapRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeatmapRequest(HeatmapRequest other) : this() {
          floorNumber_ = other.floorNumber_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HeatmapRequest Clone() {
          return new HeatmapRequest(this);
        }

        /// <summary>Field number for the "floorNumber" field.</summary>
        public const int FloorNumberFieldNumber = 1;
        private int floorNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int FloorNumber {
          get { return floorNumber_; }
          set {
            floorNumber_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HeatmapRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HeatmapRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FloorNumber != other.FloorNumber) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (FloorNumber != 0) hash ^= FloorNumber.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (FloorNumber != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(FloorNumber);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (FloorNumber != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorNumber);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HeatmapRequest other) {
          if (other == null) {
            return;
          }
          if (other.FloorNumber != 0) {
            FloorNumber = other.FloorNumber;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                FloorNumber = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class SolarPanelMessages : pb::IMessage<SolarPanelMessages> {
    private static readonly pb::MessageParser<SolarPanelMessages> _parser = new pb::MessageParser<SolarPanelMessages>(() => new SolarPanelMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarPanelMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GrpcBase.BaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPanelMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPanelMessages(SolarPanelMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPanelMessages Clone() {
      return new SolarPanelMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarPanelMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarPanelMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarPanelMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SolarPanelMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PanelInfoRequest : pb::IMessage<PanelInfoRequest> {
        private static readonly pb::MessageParser<PanelInfoRequest> _parser = new pb::MessageParser<PanelInfoRequest>(() => new PanelInfoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PanelInfoRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.SolarPanelMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoRequest(PanelInfoRequest other) : this() {
          panelName_ = other.panelName_;
          panelWidth_ = other.panelWidth_;
          panelHeight_ = other.panelHeight_;
          tilt_ = other.tilt_;
          azimuth_ = other.azimuth_;
          datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoRequest Clone() {
          return new PanelInfoRequest(this);
        }

        /// <summary>Field number for the "panelName" field.</summary>
        public const int PanelNameFieldNumber = 1;
        private string panelName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PanelName {
          get { return panelName_; }
          set {
            panelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "panelWidth" field.</summary>
        public const int PanelWidthFieldNumber = 2;
        private float panelWidth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PanelWidth {
          get { return panelWidth_; }
          set {
            panelWidth_ = value;
          }
        }

        /// <summary>Field number for the "panelHeight" field.</summary>
        public const int PanelHeightFieldNumber = 3;
        private float panelHeight_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float PanelHeight {
          get { return panelHeight_; }
          set {
            panelHeight_ = value;
          }
        }

        /// <summary>Field number for the "tilt" field.</summary>
        public const int TiltFieldNumber = 4;
        private float tilt_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Tilt {
          get { return tilt_; }
          set {
            tilt_ = value;
          }
        }

        /// <summary>Field number for the "azimuth" field.</summary>
        public const int AzimuthFieldNumber = 5;
        private float azimuth_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Azimuth {
          get { return azimuth_; }
          set {
            azimuth_ = value;
          }
        }

        /// <summary>Field number for the "datetime" field.</summary>
        public const int DatetimeFieldNumber = 6;
        private global::Google.Protobuf.WellKnownTypes.Timestamp datetime_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Datetime {
          get { return datetime_; }
          set {
            datetime_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PanelInfoRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PanelInfoRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PanelName != other.PanelName) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PanelWidth, other.PanelWidth)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PanelHeight, other.PanelHeight)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Tilt, other.Tilt)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Azimuth, other.Azimuth)) return false;
          if (!object.Equals(Datetime, other.Datetime)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PanelName.Length != 0) hash ^= PanelName.GetHashCode();
          if (PanelWidth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PanelWidth);
          if (PanelHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PanelHeight);
          if (Tilt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Tilt);
          if (Azimuth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Azimuth);
          if (datetime_ != null) hash ^= Datetime.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PanelName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PanelName);
          }
          if (PanelWidth != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(PanelWidth);
          }
          if (PanelHeight != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(PanelHeight);
          }
          if (Tilt != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Tilt);
          }
          if (Azimuth != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Azimuth);
          }
          if (datetime_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Datetime);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PanelName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PanelName);
          }
          if (PanelWidth != 0F) {
            size += 1 + 4;
          }
          if (PanelHeight != 0F) {
            size += 1 + 4;
          }
          if (Tilt != 0F) {
            size += 1 + 4;
          }
          if (Azimuth != 0F) {
            size += 1 + 4;
          }
          if (datetime_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PanelInfoRequest other) {
          if (other == null) {
            return;
          }
          if (other.PanelName.Length != 0) {
            PanelName = other.PanelName;
          }
          if (other.PanelWidth != 0F) {
            PanelWidth = other.PanelWidth;
          }
          if (other.PanelHeight != 0F) {
            PanelHeight = other.PanelHeight;
          }
          if (other.Tilt != 0F) {
            Tilt = other.Tilt;
          }
          if (other.Azimuth != 0F) {
            Azimuth = other.Azimuth;
          }
          if (other.datetime_ != null) {
            if (datetime_ == null) {
              Datetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            Datetime.MergeFrom(other.Datetime);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                PanelName = input.ReadString();
                break;
              }
              case 21: {
                PanelWidth = input.ReadFloat();
                break;
              }
              case 29: {
                PanelHeight = input.ReadFloat();
                break;
              }
              case 37: {
                Tilt = input.ReadFloat();
                break;
              }
              case 45: {
                Azimuth = input.ReadFloat();
                break;
              }
              case 50: {
                if (datetime_ == null) {
                  Datetime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                input.ReadMessage(Datetime);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PanelInfoResponse : pb::IMessage<PanelInfoResponse> {
        private static readonly pb::MessageParser<PanelInfoResponse> _parser = new pb::MessageParser<PanelInfoResponse>(() => new PanelInfoResponse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PanelInfoResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GrpcBase.SolarPanelMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoResponse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoResponse(PanelInfoResponse other) : this() {
          currentPower_ = other.currentPower_;
          currentIrradiance_ = other.currentIrradiance_;
          effeciency_ = other.effeciency_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PanelInfoResponse Clone() {
          return new PanelInfoResponse(this);
        }

        /// <summary>Field number for the "currentPower" field.</summary>
        public const int CurrentPowerFieldNumber = 1;
        private float currentPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CurrentPower {
          get { return currentPower_; }
          set {
            currentPower_ = value;
          }
        }

        /// <summary>Field number for the "currentIrradiance" field.</summary>
        public const int CurrentIrradianceFieldNumber = 2;
        private float currentIrradiance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CurrentIrradiance {
          get { return currentIrradiance_; }
          set {
            currentIrradiance_ = value;
          }
        }

        /// <summary>Field number for the "effeciency" field.</summary>
        public const int EffeciencyFieldNumber = 3;
        private float effeciency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Effeciency {
          get { return effeciency_; }
          set {
            effeciency_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PanelInfoResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PanelInfoResponse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentPower, other.CurrentPower)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CurrentIrradiance, other.CurrentIrradiance)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Effeciency, other.Effeciency)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CurrentPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentPower);
          if (CurrentIrradiance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CurrentIrradiance);
          if (Effeciency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Effeciency);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CurrentPower != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(CurrentPower);
          }
          if (CurrentIrradiance != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(CurrentIrradiance);
          }
          if (Effeciency != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Effeciency);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CurrentPower != 0F) {
            size += 1 + 4;
          }
          if (CurrentIrradiance != 0F) {
            size += 1 + 4;
          }
          if (Effeciency != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PanelInfoResponse other) {
          if (other == null) {
            return;
          }
          if (other.CurrentPower != 0F) {
            CurrentPower = other.CurrentPower;
          }
          if (other.CurrentIrradiance != 0F) {
            CurrentIrradiance = other.CurrentIrradiance;
          }
          if (other.Effeciency != 0F) {
            Effeciency = other.Effeciency;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                CurrentPower = input.ReadFloat();
                break;
              }
              case 21: {
                CurrentIrradiance = input.ReadFloat();
                break;
              }
              case 29: {
                Effeciency = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
