// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: base.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Base {

  /// <summary>Holder for reflection information generated from base.proto</summary>
  public static partial class BaseReflection {

    #region Descriptor
    /// <summary>File descriptor for base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpiYXNlLnByb3RvEgRiYXNlIrECCg9OZXRhdG1vTWVzc2FnZXMaEAoOTmV0",
            "YXRtb1JlcXVlc3QacwoLTmV0YXRtb0RhdGESMAoGaW5kb29yGAEgASgLMiAu",
            "YmFzZS5OZXRhdG1vTWVzc2FnZXMuSW5kb29yRGF0YRIyCgdvdXRkb29yGAIg",
            "ASgLMiEuYmFzZS5OZXRhdG1vTWVzc2FnZXMuT3V0ZG9vckRhdGEaYQoKSW5k",
            "b29yRGF0YRITCgt0ZW1wZXJhdHVyZRgBIAEoAhILCgNDTzIYAiABKAISEAoI",
            "aHVtaWRpdHkYAyABKAISDQoFbm9pc2UYBCABKAISEAoIcHJlc3N1cmUYBSAB",
            "KAIaNAoLT3V0ZG9vckRhdGESEwoLdGVtcGVyYXR1cmUYASABKAISEAoIaHVt",
            "aWRpdHkYAiABKAIimwEKDUltYWdlTWVzc2FnZXMaQAoMSW1hZ2VSZXF1ZXN0",
            "EhEKCWltYWdlVHlwZRgBIAEoCRINCgV3aWR0aBgCIAEoBRIOCgZoZWlnaHQY",
            "AyABKAUaSAoJSW1hZ2VEYXRhEgwKBGRhdGEYASABKAwSDgoGZm9ybWF0GAIg",
            "ASgJEg0KBXdpZHRoGAMgASgFEg4KBmhlaWdodBgEIAEoBTJfCgdOZXRhdG1v",
            "ElQKB0dldERhdGESJC5iYXNlLk5ldGF0bW9NZXNzYWdlcy5OZXRhdG1vUmVx",
            "dWVzdBohLmJhc2UuTmV0YXRtb01lc3NhZ2VzLk5ldGF0bW9EYXRhIgAyVgoF",
            "SW1hZ2USTQoIR2V0SW1hZ2USIC5iYXNlLkltYWdlTWVzc2FnZXMuSW1hZ2VS",
            "ZXF1ZXN0Gh0uYmFzZS5JbWFnZU1lc3NhZ2VzLkltYWdlRGF0YSIAYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.NetatmoMessages), global::Base.NetatmoMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Base.NetatmoMessages.Types.NetatmoRequest), global::Base.NetatmoMessages.Types.NetatmoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.NetatmoMessages.Types.NetatmoData), global::Base.NetatmoMessages.Types.NetatmoData.Parser, new[]{ "Indoor", "Outdoor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.NetatmoMessages.Types.IndoorData), global::Base.NetatmoMessages.Types.IndoorData.Parser, new[]{ "Temperature", "CO2", "Humidity", "Noise", "Pressure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.NetatmoMessages.Types.OutdoorData), global::Base.NetatmoMessages.Types.OutdoorData.Parser, new[]{ "Temperature", "Humidity" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.ImageMessages), global::Base.ImageMessages.Parser, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Base.ImageMessages.Types.ImageRequest), global::Base.ImageMessages.Types.ImageRequest.Parser, new[]{ "ImageType", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Base.ImageMessages.Types.ImageData), global::Base.ImageMessages.Types.ImageData.Parser, new[]{ "Data", "Format", "Width", "Height" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NetatmoMessages : pb::IMessage<NetatmoMessages> {
    private static readonly pb::MessageParser<NetatmoMessages> _parser = new pb::MessageParser<NetatmoMessages>(() => new NetatmoMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetatmoMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Base.BaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages(NetatmoMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetatmoMessages Clone() {
      return new NetatmoMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetatmoMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetatmoMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetatmoMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetatmoMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class NetatmoRequest : pb::IMessage<NetatmoRequest> {
        private static readonly pb::MessageParser<NetatmoRequest> _parser = new pb::MessageParser<NetatmoRequest>(() => new NetatmoRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetatmoRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.NetatmoMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest(NetatmoRequest other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoRequest Clone() {
          return new NetatmoRequest(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetatmoRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetatmoRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetatmoRequest other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        }

      }

      public sealed partial class NetatmoData : pb::IMessage<NetatmoData> {
        private static readonly pb::MessageParser<NetatmoData> _parser = new pb::MessageParser<NetatmoData>(() => new NetatmoData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NetatmoData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.NetatmoMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData(NetatmoData other) : this() {
          indoor_ = other.indoor_ != null ? other.indoor_.Clone() : null;
          outdoor_ = other.outdoor_ != null ? other.outdoor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NetatmoData Clone() {
          return new NetatmoData(this);
        }

        /// <summary>Field number for the "indoor" field.</summary>
        public const int IndoorFieldNumber = 1;
        private global::Base.NetatmoMessages.Types.IndoorData indoor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Base.NetatmoMessages.Types.IndoorData Indoor {
          get { return indoor_; }
          set {
            indoor_ = value;
          }
        }

        /// <summary>Field number for the "outdoor" field.</summary>
        public const int OutdoorFieldNumber = 2;
        private global::Base.NetatmoMessages.Types.OutdoorData outdoor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Base.NetatmoMessages.Types.OutdoorData Outdoor {
          get { return outdoor_; }
          set {
            outdoor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NetatmoData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NetatmoData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Indoor, other.Indoor)) return false;
          if (!object.Equals(Outdoor, other.Outdoor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (indoor_ != null) hash ^= Indoor.GetHashCode();
          if (outdoor_ != null) hash ^= Outdoor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (indoor_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Indoor);
          }
          if (outdoor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Outdoor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (indoor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Indoor);
          }
          if (outdoor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outdoor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NetatmoData other) {
          if (other == null) {
            return;
          }
          if (other.indoor_ != null) {
            if (indoor_ == null) {
              Indoor = new global::Base.NetatmoMessages.Types.IndoorData();
            }
            Indoor.MergeFrom(other.Indoor);
          }
          if (other.outdoor_ != null) {
            if (outdoor_ == null) {
              Outdoor = new global::Base.NetatmoMessages.Types.OutdoorData();
            }
            Outdoor.MergeFrom(other.Outdoor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (indoor_ == null) {
                  Indoor = new global::Base.NetatmoMessages.Types.IndoorData();
                }
                input.ReadMessage(Indoor);
                break;
              }
              case 18: {
                if (outdoor_ == null) {
                  Outdoor = new global::Base.NetatmoMessages.Types.OutdoorData();
                }
                input.ReadMessage(Outdoor);
                break;
              }
            }
          }
        }

      }

      public sealed partial class IndoorData : pb::IMessage<IndoorData> {
        private static readonly pb::MessageParser<IndoorData> _parser = new pb::MessageParser<IndoorData>(() => new IndoorData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IndoorData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.NetatmoMessages.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData(IndoorData other) : this() {
          temperature_ = other.temperature_;
          cO2_ = other.cO2_;
          humidity_ = other.humidity_;
          noise_ = other.noise_;
          pressure_ = other.pressure_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IndoorData Clone() {
          return new IndoorData(this);
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 1;
        private float temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        /// <summary>Field number for the "CO2" field.</summary>
        public const int CO2FieldNumber = 2;
        private float cO2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float CO2 {
          get { return cO2_; }
          set {
            cO2_ = value;
          }
        }

        /// <summary>Field number for the "humidity" field.</summary>
        public const int HumidityFieldNumber = 3;
        private float humidity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Humidity {
          get { return humidity_; }
          set {
            humidity_ = value;
          }
        }

        /// <summary>Field number for the "noise" field.</summary>
        public const int NoiseFieldNumber = 4;
        private float noise_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Noise {
          get { return noise_; }
          set {
            noise_ = value;
          }
        }

        /// <summary>Field number for the "pressure" field.</summary>
        public const int PressureFieldNumber = 5;
        private float pressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Pressure {
          get { return pressure_; }
          set {
            pressure_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as IndoorData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IndoorData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CO2, other.CO2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Noise, other.Noise)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pressure, other.Pressure)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
          if (CO2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CO2);
          if (Humidity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Humidity);
          if (Noise != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Noise);
          if (Pressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pressure);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Temperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Temperature);
          }
          if (CO2 != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(CO2);
          }
          if (Humidity != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Humidity);
          }
          if (Noise != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(Noise);
          }
          if (Pressure != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(Pressure);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Temperature != 0F) {
            size += 1 + 4;
          }
          if (CO2 != 0F) {
            size += 1 + 4;
          }
          if (Humidity != 0F) {
            size += 1 + 4;
          }
          if (Noise != 0F) {
            size += 1 + 4;
          }
          if (Pressure != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IndoorData other) {
          if (other == null) {
            return;
          }
          if (other.Temperature != 0F) {
            Temperature = other.Temperature;
          }
          if (other.CO2 != 0F) {
            CO2 = other.CO2;
          }
          if (other.Humidity != 0F) {
            Humidity = other.Humidity;
          }
          if (other.Noise != 0F) {
            Noise = other.Noise;
          }
          if (other.Pressure != 0F) {
            Pressure = other.Pressure;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Temperature = input.ReadFloat();
                break;
              }
              case 21: {
                CO2 = input.ReadFloat();
                break;
              }
              case 29: {
                Humidity = input.ReadFloat();
                break;
              }
              case 37: {
                Noise = input.ReadFloat();
                break;
              }
              case 45: {
                Pressure = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class OutdoorData : pb::IMessage<OutdoorData> {
        private static readonly pb::MessageParser<OutdoorData> _parser = new pb::MessageParser<OutdoorData>(() => new OutdoorData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<OutdoorData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.NetatmoMessages.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData(OutdoorData other) : this() {
          temperature_ = other.temperature_;
          humidity_ = other.humidity_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public OutdoorData Clone() {
          return new OutdoorData(this);
        }

        /// <summary>Field number for the "temperature" field.</summary>
        public const int TemperatureFieldNumber = 1;
        private float temperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Temperature {
          get { return temperature_; }
          set {
            temperature_ = value;
          }
        }

        /// <summary>Field number for the "humidity" field.</summary>
        public const int HumidityFieldNumber = 2;
        private float humidity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Humidity {
          get { return humidity_; }
          set {
            humidity_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as OutdoorData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(OutdoorData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
          if (Humidity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Humidity);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Temperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(Temperature);
          }
          if (Humidity != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Humidity);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Temperature != 0F) {
            size += 1 + 4;
          }
          if (Humidity != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(OutdoorData other) {
          if (other == null) {
            return;
          }
          if (other.Temperature != 0F) {
            Temperature = other.Temperature;
          }
          if (other.Humidity != 0F) {
            Humidity = other.Humidity;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Temperature = input.ReadFloat();
                break;
              }
              case 21: {
                Humidity = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ImageMessages : pb::IMessage<ImageMessages> {
    private static readonly pb::MessageParser<ImageMessages> _parser = new pb::MessageParser<ImageMessages>(() => new ImageMessages());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageMessages> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Base.BaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages(ImageMessages other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageMessages Clone() {
      return new ImageMessages(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageMessages);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageMessages other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageMessages other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageMessages message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ImageRequest : pb::IMessage<ImageRequest> {
        private static readonly pb::MessageParser<ImageRequest> _parser = new pb::MessageParser<ImageRequest>(() => new ImageRequest());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.ImageMessages.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest(ImageRequest other) : this() {
          imageType_ = other.imageType_;
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageRequest Clone() {
          return new ImageRequest(this);
        }

        /// <summary>Field number for the "imageType" field.</summary>
        public const int ImageTypeFieldNumber = 1;
        private string imageType_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageType {
          get { return imageType_; }
          set {
            imageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 2;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 3;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageRequest other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ImageType != other.ImageType) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ImageType.Length != 0) hash ^= ImageType.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ImageType.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ImageType);
          }
          if (Width != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ImageType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageType);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageRequest other) {
          if (other == null) {
            return;
          }
          if (other.ImageType.Length != 0) {
            ImageType = other.ImageType;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ImageType = input.ReadString();
                break;
              }
              case 16: {
                Width = input.ReadInt32();
                break;
              }
              case 24: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ImageData : pb::IMessage<ImageData> {
        private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Base.ImageMessages.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData(ImageData other) : this() {
          data_ = other.data_;
          format_ = other.format_;
          width_ = other.width_;
          height_ = other.height_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageData Clone() {
          return new ImageData(this);
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 1;
        private pb::ByteString data_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Data {
          get { return data_; }
          set {
            data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 2;
        private string format_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Format {
          get { return format_; }
          set {
            format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "width" field.</summary>
        public const int WidthFieldNumber = 3;
        private int width_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Width {
          get { return width_; }
          set {
            width_ = value;
          }
        }

        /// <summary>Field number for the "height" field.</summary>
        public const int HeightFieldNumber = 4;
        private int height_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Height {
          get { return height_; }
          set {
            height_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Data != other.Data) return false;
          if (Format != other.Format) return false;
          if (Width != other.Width) return false;
          if (Height != other.Height) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Data.Length != 0) hash ^= Data.GetHashCode();
          if (Format.Length != 0) hash ^= Format.GetHashCode();
          if (Width != 0) hash ^= Width.GetHashCode();
          if (Height != 0) hash ^= Height.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Data.Length != 0) {
            output.WriteRawTag(10);
            output.WriteBytes(Data);
          }
          if (Format.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Format);
          }
          if (Width != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(Width);
          }
          if (Height != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Height);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Data.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
          }
          if (Format.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
          }
          if (Width != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
          }
          if (Height != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageData other) {
          if (other == null) {
            return;
          }
          if (other.Data.Length != 0) {
            Data = other.Data;
          }
          if (other.Format.Length != 0) {
            Format = other.Format;
          }
          if (other.Width != 0) {
            Width = other.Width;
          }
          if (other.Height != 0) {
            Height = other.Height;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Data = input.ReadBytes();
                break;
              }
              case 18: {
                Format = input.ReadString();
                break;
              }
              case 24: {
                Width = input.ReadInt32();
                break;
              }
              case 32: {
                Height = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
